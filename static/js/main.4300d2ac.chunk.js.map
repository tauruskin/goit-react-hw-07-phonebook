{"version":3,"sources":["redux/contacts/contactAction.js","redux/contacts/contactReducer.js","redux/contacts/rootReducer.js","redux/store.js","redux/contacts/contactOperations.js","redux/contacts/contactsSelector.js","components/phoneForm/PhoneForm.js","components/filter/Filter.js","components/singleContact/SingleContact.js","components/contactList/ContactList.js","components/app/App.js","index.js"],"names":["getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","handleFilter","payload","target","value","items","createReducer","state","filter","contact","id","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","axios","defaults","baseURL","itemsSelector","filterSelector","getFilteredContact","createSelector","name","toLowerCase","includes","getContactById","contactId","find","PhoneForm","formInitialState","number","alert","inputHandler","setState","submitHandler","e","preventDefault","props","toggleAlert","reset","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","dispatch","a","post","result","data","connect","ownProps","deleteContact","delete","TransitionGroup","component","map","key","App","animation","onGetContacts","appear","length","get","ReactDOM","render","document","getElementById"],"mappings":"0VAEaA,EAAqBC,YAAa,uBAClCC,EAAqBD,YAAa,uBAClCE,EAAmBF,YAAa,qBAEhCG,EAAoBH,YAAa,uBACjCI,EAAoBJ,YAAa,uBACjCK,EAAkBL,YAAa,qBAE/BM,EAAuBN,YAAa,0BACpCO,EAAuBP,YAAa,0BACpCQ,EAAqBR,YAAa,wBAElCS,EAAeT,YAAa,mBAAmB,kBAAiB,CAC3EU,QAD0D,EAAGC,OAC7CC,UCJLC,EAAQC,YAAc,IAAD,mBAC/Bb,GAAqB,SAACc,EAAD,YAAUL,WADA,cAE/BN,GAAoB,SAACW,EAAD,OAAUL,EAAV,EAAUA,QAAV,4BAA4BK,GAA5B,CAAmCL,OAFxB,cAG/BH,GANmB,SAACQ,EAAD,OAAUL,EAAV,EAAUA,QAAV,OACpBK,EAAMC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOR,QAEP,IAKrBM,EAASF,YAAc,GAAD,eAChCL,GAAe,SAACM,EAAD,YAAUL,YCdbS,cAAgB,CAC7BN,QACAG,WCGaI,EALDC,YAAe,CAC3BC,QAAS,CAAEC,SAAUC,GACrBC,UAAUC,I,kFCQZC,IAAMC,SAASC,QAAU,wBAElB,I,OCbMC,EAAgB,SAAAf,GAAK,OAAIA,EAAMQ,SAASV,OACxCkB,EAAiB,SAAAhB,GAAK,OAAIA,EAAMQ,SAASP,QAEzCgB,EAAqBC,YAChC,CAACH,EAAeC,IAChB,SAAClB,EAAOG,GACN,OAAOH,EAAMG,QAAO,SAAAC,GAAO,OACzBA,EAAQiB,KAAKC,cAAcC,SAASpB,EAAOmB,qBAKpCE,EAAiBJ,YAC5B,CAACH,EAAe,SAACf,EAAOuB,GAAR,OAAsBA,KACtC,SAACzB,EAAOyB,GAAR,OAAsBzB,EAAM0B,MAAK,SAAAtB,GAAO,OAAIA,EAAQC,KAAOoB,Q,QCLvDE,G,kNACJC,iBAAmB,CACjBP,KAAM,GACNQ,OAAQ,I,EAGV3B,M,2BACK,EAAK0B,kB,IACRE,OAAO,I,EAGTC,aAAe,YAAiB,IAAdjC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,MAAOsB,EAASvB,EAATuB,KAEf,EAAKW,SAAL,eACGX,EAAOtB,K,EAIZkC,cAAgB,SAAAC,GAAM,IAAD,EACa,EAAKhC,MAA7BmB,EADW,EACXA,KAAMQ,EADK,EACLA,OAAQC,EADH,EACGA,MAMtB,GALAI,EAAEC,iBAEmB,EAAKC,MAAlB1B,SACkBgB,MAAK,SAAAtB,GAAO,OAAIA,EAAQiB,OAASA,KAIzD,OADA,EAAKgB,YAAYP,GACV,EAAKQ,QAGd,EAAKF,MAAMG,WAAWlB,EAAMQ,GAC5B,EAAKS,S,EAGPA,MAAQ,WACN,EAAKN,SAAL,eAAmB,EAAKJ,oB,EAG1BS,YAAc,SAAAG,GACZ,EAAKR,SAAS,CAAEF,OAAQU,K,uDAGhB,IAAD,SACyBC,KAAKvC,MAA7BmB,EADD,EACCA,KAAMQ,EADP,EACOA,OAAQC,EADf,EACeA,MAGtB,OACE,oCACE,kBAACY,EAAA,EAAD,CACEC,GAAIb,EACJc,WAAW,QACXC,QAAS,KACTC,eAAa,EACbC,UATa,kBAAM,EAAKf,SAAS,CAAEF,OAAQA,MAW3C,4BACEkB,QAASP,KAAKJ,YACdY,UAAU,SAFZ,4BAKF,0BAAMA,UAAU,gBAAgBC,SAAUT,KAAKR,eAC7C,2BAAOgB,UAAU,cAAjB,OAEE,6BACA,2BACEA,UAAU,aACVE,KAAK,OACL9B,KAAK,OACL+B,YAAY,WACZrD,MAAOsB,EACPgC,SAAUZ,KAAKV,gBAGnB,6BACA,2BAAOkB,UAAU,cAAjB,SAEE,6BACA,2BACEA,UAAU,aACVE,KAAK,OACL9B,KAAK,SACL+B,YAAY,mBACZrD,MAAO8B,EACPwB,SAAUZ,KAAKV,gBAGnB,6BACA,4BAAQoB,KAAK,SAASF,UAAU,aAAhC,wB,GAxFcK,cAsGlBC,EAAqB,CACzBhB,WFzFwB,SAAClB,EAAMQ,GAAP,8CAAkB,WAAM2B,GAAN,eAAAC,EAAA,6DAC1CD,EAASlE,KADiC,kBAGnBwB,IAAM4C,KAAK,YAAa,CAC3CrC,OACAQ,WALsC,OAGlC8B,EAHkC,OAOxCH,EAASjE,EAAkBoE,EAAOC,OAPM,gDASxCJ,EAAShE,EAAgB,EAAD,KATgB,yDAAlB,wDE4FXqE,eATS,SAAA3D,GAAK,MAAK,CAChCQ,SAAUO,EAAcf,GACxBC,OAAQe,EAAehB,MAOeqD,EAAzBM,CAA6ClC,GCvFtD4B,G,MAAqB,CACzB3D,iBAGaiE,eARS,SAAA3D,GAAK,MAAK,CAChCC,OAAQe,EAAehB,MAOeqD,EAAzBM,EA3BA,SAAC,GAA8B,IAA5B1D,EAA2B,EAA3BA,OAAQP,EAAmB,EAAnBA,aACxB,OACE,yBAAKqD,UAAU,cACb,2BAAOA,UAAU,eAAjB,wBAEE,6BACA,2BACEA,UAAU,cACVE,KAAK,OACL9B,KAAK,SACL+B,YAAY,eACZrD,MAAOI,EACPkD,SAAUzD,S,QCQLiE,G,MAAAA,aATS,SAAC3D,EAAO4D,GAC9B,IAAM1D,EAAUoB,EAAetB,EAAO4D,EAASzD,IAC/C,OAAO,eAAKD,MAGa,SAACoD,EAAUM,GAAX,MAAyB,CAClDC,cAAe,kBAAMP,GJcMnD,EIdiByD,EAASzD,GJcxB,uCAAI,WAAMmD,GAAN,SAAAC,EAAA,6DACjCD,EAAS/D,KADwB,kBAGzBqB,IAAMkD,OAAN,oBAA0B3D,IAHD,OAI/BmD,EAAS9D,EAAqBW,IAJC,gDAM/BmD,EAAS7D,EAAmB,EAAD,KANI,yDAAJ,wDAAF,IAAAU,MIXdwD,EApBO,SAAC,GAAqC,IAAnCxC,EAAkC,EAAlCA,KAAMQ,EAA4B,EAA5BA,OAAQkC,EAAoB,EAApBA,cACrC,OACE,wBAAId,UAAU,WACZ,4BAAK5B,GACL,2BAAIQ,GACJ,4BAAQoB,UAAU,eAAeE,KAAK,SAASH,QAASe,GAAxD,eCWSF,G,MAAAA,aAJS,SAAA3D,GAAK,MAAK,CAChCQ,SAAUS,EAAmBjB,MAGhB2D,EAfK,SAAC,GAAkB,IAAhBnD,EAAe,EAAfA,SACrB,OACE,kBAACuD,EAAA,EAAD,CAAiBC,UAAU,KAAKjB,UAAU,gBACvCvC,EAASyD,KAAI,gBAAG9D,EAAH,EAAGA,GAAH,OACZ,kBAACqC,EAAA,EAAD,CAAe0B,IAAK/D,EAAIuC,WAAW,YAAYC,QAAS,KACtD,kBAAC,EAAD,CAAexC,GAAIA,aCHvBgE,G,kNACJnE,MAAQ,CACNoE,WAAW,G,kEAIX7B,KAAKL,MAAMmC,gBACX9B,KAAKT,UAAS,SAAA9B,GAAK,MAAK,CACtBoE,WAAYpE,EAAMoE,gB,+BAKpB,OACE,yBAAKrB,UAAU,aACb,kBAACP,EAAA,EAAD,CACEC,IAAI,EACJ6B,QAAQ,EACR5B,WAAW,gBACXC,QAAS,IACTC,eAAa,GAEb,wBAAIG,UAAU,aAAd,cAGF,kBAAC,EAAD,MAEgC,IAA/BR,KAAKL,MAAM1B,SAAS+D,QACnB,oCACE,wBAAIxB,UAAU,iBAAd,YACA,mFAIJ,kBAACP,EAAA,EAAD,CACEC,GAAIF,KAAKL,MAAM1B,SAAS+D,OAAS,EACjC7B,WAAW,mBACXC,QAAS,IACTC,eAAa,GAEb,kBAAC,EAAD,OAGF,kBAAC,EAAD,W,GA3CUQ,cAoDZC,EAAqB,CACzBgB,cNhDyB,yDAAM,WAAMf,GAAN,eAAAC,EAAA,6DAC/BD,EAAStE,KADsB,kBAGR4B,IAAM4D,IAAI,aAHF,OAGvBf,EAHuB,OAI7BH,EAASpE,EAAmBuE,EAAOC,OAJN,gDAM7BJ,EAASnE,EAAiB,EAAD,KANI,yDAAN,wDMmDZwE,eAPS,SAAA3D,GAAK,MAAK,CAChCQ,SAAUO,EAAcf,MAMcqD,EAAzBM,CAA6CQ,G,MC3D5DM,IAASC,OACP,kBAAC,IAAD,CAAUrE,MAAOA,GACf,kBAAC,EAAD,OAEFsE,SAASC,eAAe,W","file":"static/js/main.4300d2ac.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const getContactsRequest = createAction('@contact/getRequest');\r\nexport const getContactsSuccess = createAction('@contact/getSuccess');\r\nexport const getContactsError = createAction('@contact/getError');\r\n\r\nexport const addContactRequest = createAction('@contact/addRequest');\r\nexport const addContactSuccess = createAction('@contact/addSuccess');\r\nexport const addContactError = createAction('@contact/addError');\r\n\r\nexport const deleteContactRequest = createAction('@contact/deleteRequest');\r\nexport const deleteContactSuccess = createAction('@contact/deleteSuccess');\r\nexport const deleteContactError = createAction('@contact/deleteError');\r\n\r\nexport const handleFilter = createAction('@contact/filter', ({ target }) => ({\r\n  payload: target.value,\r\n}));\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  getContactsSuccess,\r\n  deleteContactSuccess,\r\n  handleFilter,\r\n} from './contactAction';\r\n\r\nconst removeContact = (state, { payload }) =>\r\n  state.filter(contact => contact.id !== payload);\r\n\r\nexport const items = createReducer([], {\r\n  [getContactsSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: removeContact,\r\n});\r\nexport const filter = createReducer('', {\r\n  [handleFilter]: (state, { payload }) => (state = payload),\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { items, filter } from './contactReducer';\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './contacts/rootReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: rootReducer },\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contactAction';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nexport const getContacts = () => async dispatch => {\r\n  dispatch(getContactsRequest());\r\n  try {\r\n    const result = await axios.get('/contacts');\r\n    dispatch(getContactsSuccess(result.data));\r\n  } catch (error) {\r\n    dispatch(getContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const result = await axios.post('/contacts', {\r\n      name,\r\n      number,\r\n    });\r\n    dispatch(addContactSuccess(result.data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const itemsSelector = state => state.contacts.items;\r\nexport const filterSelector = state => state.contacts.filter;\r\n\r\nexport const getFilteredContact = createSelector(\r\n  [itemsSelector, filterSelector],\r\n  (items, filter) => {\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport const getContactById = createSelector(\r\n  [itemsSelector, (state, contactId) => contactId],\r\n  (items, contactId) => items.find(contact => contact.id === contactId),\r\n);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/contacts/contactOperations';\r\nimport {\r\n  filterSelector,\r\n  itemsSelector,\r\n} from '../../redux/contacts/contactsSelector';\r\nimport './PhoneForm.css';\r\n\r\nclass PhoneForm extends Component {\r\n  formInitialState = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  state = {\r\n    ...this.formInitialState,\r\n    alert: false,\r\n  };\r\n\r\n  inputHandler = ({ target }) => {\r\n    const { value, name } = target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  submitHandler = e => {\r\n    const { name, number, alert } = this.state;\r\n    e.preventDefault();\r\n\r\n    const { contacts } = this.props;\r\n    const isExists = contacts.find(contact => contact.name === name);\r\n\r\n    if (isExists) {\r\n      this.toggleAlert(alert);\r\n      return this.reset();\r\n    }\r\n\r\n    this.props.addContact(name, number);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...this.formInitialState });\r\n  };\r\n\r\n  toggleAlert = status => {\r\n    this.setState({ alert: !status });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, alert } = this.state;\r\n    const alertDelay = () => this.setState({ alert: !alert });\r\n\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={alert}\r\n          classNames=\"alert\"\r\n          timeout={1500}\r\n          unmountOnExit\r\n          onEntered={alertDelay}\r\n        >\r\n          <button\r\n            onClick={this.toggleAlert}\r\n            className=\"alert\"\r\n          >{`Contact already exists!`}</button>\r\n        </CSSTransition>\r\n        <form className=\"contacts_form\" onSubmit={this.submitHandler}>\r\n          <label className=\"input_name\">\r\n            Name\r\n            <br></br>\r\n            <input\r\n              className=\"input_form\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Add name\"\r\n              value={name}\r\n              onChange={this.inputHandler}\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <label className=\"input_name\">\r\n            Number\r\n            <br></br>\r\n            <input\r\n              className=\"input_form\"\r\n              type=\"text\"\r\n              name=\"number\"\r\n              placeholder=\"Add phone number\"\r\n              value={number}\r\n              onChange={this.inputHandler}\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <button type=\"submit\" className=\"submitBtn\">\r\n            Create contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: itemsSelector(state),\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\r\n\r\nPhoneForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.number,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { handleFilter } from '../../redux/contacts/contactAction';\r\nimport { filterSelector } from '../../redux/contacts/contactsSelector';\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ filter, handleFilter }) => {\r\n  return (\r\n    <div className=\"filter_box\">\r\n      <label className=\"input_label\">\r\n        Find contacts by name\r\n        <br></br>\r\n        <input\r\n          className=\"filter_form\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Find contact\"\r\n          value={filter}\r\n          onChange={handleFilter}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/contacts/contactOperations';\r\nimport { getContactById } from '../../redux/contacts/contactsSelector';\r\nimport './SingleContact.css';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className=\"contact\">\r\n      <h4>{name}</h4>\r\n      <p>{number}</p>\r\n      <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\r\n        &#10008;\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = getContactById(state, ownProps.id);\r\n  return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n\r\nSingleContact.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { getFilteredContact } from '../../redux/contacts/contactsSelector';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contact_List\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n          <SingleContact id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  contacts: getFilteredContact(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.number,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { getContacts } from '../../redux/contacts/contactOperations';\r\nimport { itemsSelector } from '../../redux/contacts/contactsSelector';\r\nimport PhoneForm from '../phoneForm/PhoneForm';\r\nimport Filter from '../filter/Filter';\r\nimport ContactList from '../contactList/ContactList';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    animation: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onGetContacts();\r\n    this.setState(state => ({\r\n      animation: !state.animation,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"title-slideIn\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"app_title\">Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <PhoneForm />\r\n\r\n        {this.props.contacts.length === 0 && (\r\n          <>\r\n            <h2 className=\"contact_title\">Contacts</h2>\r\n            <p>Contacts list is empty. Please, create new cotnact!</p>\r\n          </>\r\n        )}\r\n\r\n        <CSSTransition\r\n          in={this.props.contacts.length > 1}\r\n          classNames=\"filter_animation\"\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: itemsSelector(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  onGetContacts: getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}